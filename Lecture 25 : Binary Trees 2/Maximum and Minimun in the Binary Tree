/*
	
	Following is the structure used to represent the Binary Tree Node

	class BinaryTreeNode<T> {
		T data;
		BinaryTreeNode<T> left;
		BinaryTreeNode<T> right;

		public BinaryTreeNode(T data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

*/



/*

	Representation of the Pair Class

	class Pair<T, U> {
		T minimum;
		U maximum;

		public Pair(T minimum, U maximum) {
			this.minimum = minimum;
			this.maximum = maximum;
		}

	}

*/

public class Solution {

	public static Pair<Integer, Integer> getMinAndMax(Node<Integer> root) {
				if(root == null){
					int min = Integer.MAX_VALUE;
					int max = Integer.MIN_VALUE;
					Pair<Integer, Integer>  p = new Pair(min,max);
					return p; 
				}
				Pair<Integer, Integer> leftsubTree = getMinAndMax(root.left);
				Pair<Integer, Integer> rightsubTree = getMinAndMax(root.right);

				int min = Math.min(root.data, Math.min(leftsubTree.minimum, rightsubTree.minimum));
				int max = Math.max(root.data, Math.max(leftsubTree.maximum, rightsubTree.maximum));	

				Pair<Integer, Integer> ans = new Pair(min,max);
				return ans;
			}
	
}
